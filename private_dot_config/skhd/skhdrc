# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# 窗口聚焦
alt - left : yabai -m window --focus west
alt - down : yabai -m window --focus south
alt - up : yabai -m window --focus north
alt - right : yabai -m window --focus east

# 交换窗口
shift + alt - left : yabai -m window --swap west
shift + alt - down : yabai -m window --swap south
shift + alt - up : yabai -m window --swap north
shift + alt - right : yabai -m window --swap east

# 移动窗口
shift + alt + ctrl - left : yabai -m window --warp west
shift + alt + ctrl - down : yabai -m window --warp south
shift + alt + ctrl - up : yabai -m window --warp north
shift + alt + ctrl - right : yabai -m window --warp east

# 旋转窗口布局
alt - o : yabai -m space --rotate 90

# 全屏
alt - return : yabai -m window --toggle zoom-fullscreen

# 设置/取消窗口 space
# alt - space : yabai -m space --toggle padding && yabai -m space --toggle gap

# 挂起窗口至屏幕中央/取消挂起窗口
# alt - f : yabai -m window --toggle float && yabai -m window --grid 4:4:1:1:2:2

# 修改窗口切分方式
alt - l : yabai -m window --toggle split

# 重置窗口布局
alt - space : yabai -m space --balance

# 移动窗口至特定桌面
shift + alt - q : yabai -m window --space 6 && yabai -m space --focus 6
shift + alt - w : yabai -m window --space 7 && yabai -m space --focus 7
shift + alt - e : yabai -m window --space 8 && yabai -m space --focus 8
shift + alt - r : yabai -m window --space 9 && yabai -m space --focus 9
shift + alt - a : yabai -m window --space 1 && yabai -m space --focus 1
shift + alt - s : yabai -m window --space 2 && yabai -m space --focus 2
shift + alt - d : yabai -m window --space 3 && yabai -m space --focus 3
shift + alt - f : yabai -m window --space 4 && yabai -m space --focus 4
shift + alt - g : yabai -m window --space 5 && yabai -m space --focus 5

# alt - q -> : yabai -m space --focus 1
# alt - w -> : yabai -m space --focus 2
# alt - e -> : yabai -m space --focus 3
# alt - r -> : yabai -m space --focus 4
# alt - 1 -> : yabai -m space --focus 5
# alt - 2 -> : yabai -m space --focus 6
# alt - 3 -> : yabai -m space --focus 7
# alt - 4 -> : yabai -m space --focus 8
# alt - 5 -> : yabai -m space --focus 9

# 键位：https://github.com/koekeishiya/skhd/issues/1
# 1B -   18 =    33 back
alt - 0x33 : yabai -m window --focus recent
# alt - 0x18 : yabai -m window --focus next
cmd + shift - t : open -n -a Alacritty
cmd + ctrl - f5 : open -a 'Google Chrome' 'https://www.google.com/search?q='"$(pbpaste)"
cmd + ctrl + shift - f5 : open -a 'Google Chrome' 'https://github.com/search?type=repositories&q='"$(pbpaste)"
cmd + ctrl - f4 : translate
cmd + ctrl + shift - f3 : open -a 'Google Chrome' 'https://cloud.bytedance.net/argos/streamlog/info_overview/log_id_search?logId='"$(pbpaste)"
cmd + ctrl - f3 : open -a 'Google Chrome' 'https://cloud-boe.bytedance.net/argos/streamlog/info_overview/log_id_search?logId='"$(pbpaste)"

# 增加窗口大小
# shift + alt - w : yabai -m window --resize top:0:-20
# shift + alt - d : yabai -m window --resize left:-20:0

# 减少窗口大小
# shift + alt - s : yabai -m window --resize bottom:0:-20
# shift + alt - a : yabai -m window --resize top:0:20

# make floating window fill screen
# shift + alt - up : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left : yabai -m window --grid 1:2:0:0:1:1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent

# toggle sticky(+float), topmost, picture-in-picture
alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip

# alt - t : yabai -m window --toggle topmost